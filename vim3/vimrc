set nocompatible
set encoding=utf-8 " Set default file encoding

filetype off


" Pluggins  --------------------------------------------------------------- {{{
" set the runtime path to include vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

" Vundle plugin list section
" Each time a plugin is added to the list below
" You need to run  :PluginInstall within vim
call vundle#begin()

" let vundle manage vundle, required
Plugin 'vundlevim/vundle.vim'

" Color scheme solarized 
Plugin 'altercation/vim-colors-solarized'

" A nice status bar at the bottom 
Plugin 'bling/vim-airline'

" Buffer explorer
Plugin 'jlanzarotta/bufexplorer'

" NERDTree explorer
Plugin 'preservim/nerdtree'

" CtrlP
Plugin 'ctrlpvim/ctrlp.vim'

" Easy comment block/line, ... with gcc  gcgc, ...
Plugin 'tpope/vim-commentary'

" Add/Remove brackets in pairs
Plugin 'jiangmiao/auto-pairs'

" Code completition and many more (ALE)
" Plugin 'dense-analysis/ale'

" Code completion for python
Plugin 'davidhalter/jedi-vim'

" Code fix with black
Plugin 'psf/black'

" Code lint with flake8
Plugin 'nvie/vim-flake8'


" Tag generation
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'majutsushi/tagbar'

call vundle#end()            " required
filetype plugin indent on    " required
" --------------------------------------------------------------------------}}}

" General settings
set backspace=indent,eol,start  " Defines what backspace does in insert mode
set ruler        " Show the line and column number in the status line
set number       " show line number
set showcmd
set showmatch    " Highlight matching parenthesis
set incsearch    " Show the matching tokens when search a pattern
set hlsearch     " Highligh a previous search if any
set scrolloff=20 " Let some space around the cursor to see the context
set tabstop=4    " Number of spaces for a Tab
set shiftwidth=4 " Size of the autoindent

syntax enable

" Color scheme
set background=dark
colorscheme solarized
" If the terminal is not configured with solarized, uncomment the following
" let g:solarized_termcolors=256

" Mappings ---------------------------------------------------------------- {{{
" The leader globally used
let mapleader = ","

" Easily set the working directory to the file
" currently edited
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Explores the buffer
map <leader>o :BufExplorer<cr>

" Save the current buffer
map <leader>w :w!<cr>

" Window Navigation
"Move to the window below  
nnoremap <C-J> <C-W><C-J>
"Move to the window above
nnoremap <C-K> <C-W><C-K>
"Move to the window on the right
nnoremap <C-L> <C-W><C-L>
"Move to the window on the left
nnoremap <C-H> <C-W><C-H> 

" Navigate back and forth between the buffers
" nnoremap <C-p> :bprevious<CR>:redraw<CR>:ls<CR>
nnoremap <C-n> :bnext<CR>:redraw<CR>:ls<CR>

" Prefix the vertical navigation with g
" to navigate vertically within a line
nnoremap k gk
nnoremap j gj

vnoremap k gk
vnoremap j gj

" --------------------------------------------------------------------------}}}

" vimrc ------------------------------------------------------------------- {{{
" Sourcing vimrc
nnoremap <leader>sv :source $MYVIMRC<CR>
" --------------------------------------------------------------------------}}}


" Help navigation --------------------------------------------------------- {{{
" jump to links with CR
autocmd FileType help nmap <buffer> <CR> <C-]>
" jump back with BS
autocmd FileType help nmap <buffer> <BS> <C-T>
" skip to next option link
autocmd FileType help nmap <buffer> o /'[a-z]\{2,\}'<CR>:nohls<CR>
" skip to previous option link
autocmd FileType help nmap <buffer> O ?'[a-z]\{2,\}'<CR>:nohls<CR>
" skip to next subject link
autocmd FileType help nmap <buffer> s /\|\S\+\|<CR>l:noh<CR>:nohls<CR>
" skip to previous subject link
autocmd FileType help nmap <buffer> S h?\|\S\+\|<CR>l:noh<CR>:nohls<CR>
" quit
autocmd FileType help nmap <buffer> q :q<CR>
" --------------------------------------------------------------------------}}}


" NERDTree ---------------------------------------------------------------- {{{

" Show on the left
let g:NERDTreeWinPos = "left"
" on startup and the cursor back to the other window
autocmd vimenter * NERDTree | wincmd p

" Show the hidden files (starting with .)
let NERDTreeShowHidden = 1

" Do not display temporary files into NERDTree
let NERDTreeIgnore=['\.o$', '\.pyc', '\~$', '\.swp$']

" Closes VIM if the only remaining window is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" --------------------------------------------------------------------------}}}

" File settings ----------------------------------------------------------- {{{

" Python file settings ---------------------------------------------------- {{{
augroup filetype_python
	autocmd!
	autocmd BufNewFile,BufRead *.py 
		\ set tabstop=4 
		\ softtabstop=4 
		\ shiftwidth=4 
		\ textwidth=120 
		\ expandtab  " replace tabs with spaces
		\ autoindent " 
		\ fileformat=unix foldlevel=1
    autocmd FileType python nnoremap <leader>r :!python3 %<CR>
    autocmd BufWritePre *.py execute ':Black'
	autocmd BufWritePre *.py call Flake8()
augroup END
" }}}

" --------------------------------------------------------------------------}}}

" Tags -------------------------------------------------------------------- {{{

" Where to look for tags files
set tags=./tags;,~/.vimtags
" Sensible defaults
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 2
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1

" Open/close tagbar with ,b
nmap <silent> <leader>b :TagbarToggle<CR>
" autocmd BufEnter * nested :call tagbar#autoopen(0)

" --------------------------------------------------------------------------}}}

" Python ------------------------------------------------------------------ {{{

" Jedi
" Disable auto pop on dot. We can still trigger it with Ctrl + space
let g:jedi#popup_on_dot = 0

" Flake8
let g:flake8_show_in_gutter=1
let g:flake8_show_in_file=1
" call flake8#Flake8UnplaceMarkers()

" --------------------------------------------------------------------------}}}
"
" ALE --------------------------------------------------------------------- {{{

" let g:ale_linters = {'python': ['flake8']}
" let g:ale_fixers = {'python': ['black']}
" " let g:ale_lsp_suggestions = 1
" let g:ale_fix_on_save = 1
" " let g:ale_completion_enabled = 1
" " " Formating options of the linter
" let g:ale_echo_msg_error_str = 'E'
" let g:ale_echo_msg_warning_str = 'W'
" let g:ale_echo_msg_format = '[%linter%] [%severity%] %code: %%s'
" set omnifunc=ale#completion#OmniFunc
" call deoplete#custom#option('sources', {
"             \ '_': ['ale'],
"             \})
" --------------------------------------------------------------------------}}}
